{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{\"./app/app.js\":\n/*!********************!*\\\n  !*** ./app/app.js ***!\n  \\********************/\n/*! no static exports found */function(module,exports){eval('console.log(\"loading app\")\\n\\nclass Session {\\n  constructor() {\\n    this.game;\\n    this.canvas;\\n    this.globalTimer;\\n    this.resourcesDisplay;\\n  }\\n\\n  initialize() {\\n    this.game = new Clempire();\\n    this.game.load.then(function () {\\n      window.addEventListener(\\'resize\\', this.resizeHandler(), true);\\n      this.drawGame();\\n      this.displayResources();\\n      this.startGame();\\n    }.bind(this));\\n  }\\n\\n  resizeHandler() {\\n    let context = {\\n      session: this,\\n      // wait 100ms for further resizing \\n      delta: 100,\\n      timeout: false\\n    }\\n    return function() {\\n      console.log(context)\\n      context.rtime = new Date();\\n      if (!context.timeout) {\\n        context.timeout = true;\\n        setTimeout(context.session.resizeEnd.bind(context), context.delta);\\n      }\\n    }\\n  }\\n\\n  resizeEnd() {\\n    console.log(this)\\n    if (new Date() - this.rtime < this.delta) {\\n      setTimeout(this.session.resizeEnd.bind(this), this.delta);\\n    } else {\\n      this.timeout = false;\\n      this.session.drawGame.apply(this.session);\\n    }\\n  }\\n\\n  drawGame() {\\n    this.canvas = document.getElementById(\"mainCanvas\");\\n    let leftSide = document.getElementById(\"left-side\");\\n    this.canvas.width = leftSide.offsetWidth;\\n    this.canvas.height = leftSide.offsetHeight;\\n    this.displaySources();\\n    this.displayBuildings();\\n  }\\n\\n  startGame() {\\n    this.globalTimer = setInterval(this.tick.bind(this), 200);\\n  }\\n\\n  tick() {\\n    this.updateResources();\\n  }\\n\\n  displaySources() {\\n    let context = this.canvas.getContext(\"2d\");\\n    this.placeResourceAnchors();\\n    let resourceFields = document.getElementsByClassName(\"resource-field\");\\n    let counter = 0;\\n    let topGridSize = this.canvas.height / (resourceFields.length + 1)\\n\\n    for (let source in this.game.sourcesData) {\\n      if (counter === resourceFields.length) {\\n        throw new Error(\"Not enogh resource fields!\")\\n      }\\n      let image = new Image();\\n      // ToDo: cache image... atm this is reloading on every resize\\n      image.onload = function () {\\n        context.drawImage(image, 0, 0, image.width, image.height, this.canvas.width * 0.5 - 85, this.topGridSize * (this.counter + 1) - 85, 170, 170);\\n      }.bind({\\n        canvas: this.canvas,\\n        counter: counter,\\n        topGridSize: topGridSize\\n      })\\n      image.src = this.game.sourcesData[source].img;\\n      let field = resourceFields[counter];\\n      field.onclick = this.game.fieldClick.bind(this.game.sourcesData[source]);\\n      counter++;\\n    }\\n  }\\n\\n  placeResourceAnchors() {\\n    let count = 1;\\n    let length = this.game.sourcesData.length;\\n    let anchors = document.getElementById(\"anchors\");\\n    while (anchors.firstChild) {\\n      anchors.removeChild(anchors.firstChild);\\n    }\\n    for (let source in this.game.sourcesData) {\\n      let anchor = document.createElement(\"div\");\\n      anchor.classList.add(\"resource-field-anchor\");\\n      anchor.setAttribute(\"data-source-field\", count.toString());\\n      anchor.style.top = `${(100 / (length + 1)) * count}%`;\\n      anchor.style.left = \"50%\";\\n      let field = document.createElement(\"div\");\\n      field.classList.add(\"resource-field\");\\n      field.style.cursor = `url(${this.game.sourcesData[source].cursor}), pointer`\\n      anchor.appendChild(field);\\n      anchors.appendChild(anchor);\\n      count++;\\n    }\\n  }\\n\\n  displayResources() {\\n    this.resourcesDisplay = document.querySelector(\"#resources ul\");\\n    // clear list in case of a redraw due to window resize or new resources\\n    while (this.resourcesDisplay.firstChild) {\\n      this.resourcesDisplay.removeChild(this.resourcesDisplay.firstChild);\\n    }\\n    for (let resource in this.game.resourcesData) {\\n      let display = document.createElement(\"li\");\\n      let label = document.createElement(\"div\");\\n      label.style.background = `url(${this.game.resourcesData[resource].icon})  no-repeat`;\\n      display.appendChild(label);\\n      let count = document.createElement(\"span\");\\n      count.classList.add(\"resource-count\");\\n      display.appendChild(count);\\n      display.setAttribute(\"data-resource\", resource);\\n      this.resourcesDisplay.appendChild(display);\\n    }\\n  }\\n\\n  displayBuildings() {\\n    this.buildingsDisplay = document.getElementById(\"buildings\");\\n    // clear list in case of a redraw due to window resize or new resources\\n    while (this.buildingsDisplay.firstChild) {\\n      this.buildingsDisplay.removeChild(this.buildingsDisplay.firstChild);\\n    }\\n    for (let buildingIndex in this.game.buildingsData) {\\n      let display = document.createElement(\"div\");\\n      let building = this.game.buildingsData[buildingIndex];\\n      display.style.background = `url(${building.icon})  no-repeat`;\\n      display.setAttribute(\"title\", `${building.title}\\\\n\\\\n${building.description}`)\\n      this.buildingsDisplay.appendChild(display);\\n    }\\n  }\\n\\n  updateResources() {\\n    for (let i = 0; i < this.resourcesDisplay.children.length; i++) {\\n      let resourceDisplay = this.resourcesDisplay.children[i];\\n      resourceDisplay.getElementsByTagName(\"span\")[0].innerText = this.game.resources.current[resourceDisplay.dataset.resource];\\n    }\\n  }\\n}\\n\\nlet session = new Session();\\nwindow.addEventListener(\"load\", session.initialize.bind(session), true);\\n\\n//# sourceURL=webpack:///./app/app.js?')}}]);","extractedComments":[]}